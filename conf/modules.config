/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: UNTAR {
        publishDir = [
            enabled: false
        ]
    }
    withName: CP2SCRATCH {
        publishDir = [
            enabled: false
        ]
    }
    withName: BCLCONVERT {
        ext.args = {
            def argsList = [
                "--force",
                "--strict-mode true",
                "--output-legacy-stats true"
            ]
            if (meta.lane) {
                if (meta.lane="all") {
                    argsList.add("--no-lane-splitting true")
                } else {
                    argsList.add("--bcl-only-lane $meta.lane")
                }
            }
            return argsList.join(" ").trim()
        }
        publishDir = [
            [
                // Gather and write InterOp files
                path: {  meta.lane == "all" ? "${params.outdir}/InterOp/" : "${params.outdir}/${meta.id}/InterOp"  },
                mode: params.publish_dir_mode,
                pattern: "**.{bin,xml}",
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // Gather and write Reports
                path: { meta.lane == "all" ? "${params.outdir}" : (meta.lane ? "${params.outdir}/${meta.id}/L00${meta.lane}" : "${params.outdir}/${meta.id}") },
                mode: params.publish_dir_mode,
                pattern: "Reports",
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                path: {  meta.lane == "all" ? "${params.outdir}/" : "${params.outdir}/${meta.id}"  },
                mode: params.publish_dir_mode,
                pattern: "**.fastq.gz",
            ]
        ]
    }

    withName: BCL2FASTQ {
        ext.args = {
            def argsList = []
            if (meta.lane) {
                if (meta.lane="all") {
                    argsList.add("--no-lane-splitting")
                } else {
                    argsList.add("--tiles s_${meta.lane}")
                }
            }
            return argsList.join(" ").trim()}
        publishDir = [
            [
                // Gather and write InterOp files
                path: {  meta.lane == "all" ? "${params.outdir}/InterOp/" : "${params.outdir}/${meta.id}/InterOp"  },
                mode: params.publish_dir_mode,
                pattern: "**.{bin,xml}",
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // Gather and write Reports and Stats
                path: {meta.lane == "all" ? "${params.outdir}" : (meta.lane ? "${params.outdir}/${meta.id}/L00${meta.lane}" : "${params.outdir}/${meta.id}")},
                mode: params.publish_dir_mode,
                pattern: "{Reports,Stats}",
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                path: {  meta.lane == "all" ? "${params.outdir}/" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "**.fastq.gz",
            ]
        ]
    }

    withName: DRAGEN_DEMULTIPLEXER {
        ext.args = {
            def argsList = []
            if (meta.lane) {
                if (meta.lane == "all") {
                    argsList.add("--no-lane-splitting=true")
                } else {
                    argsList.add("--bcl-only-lane=$meta.lane")
                }
            }
            return argsList.join(" ").trim()
        }

        publishDir = [
            [
                // Gather and write InterOp, Reports, Logs and Stats files
                path: { meta.lane == "all" ? "${params.outdir}/demultiplex_stats" : "${params.outdir}/${meta.id}/demultiplex_stats" },
                mode: params.publish_dir_mode,
                pattern: "{InterOp,Reports,Logs,Stats}",
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // Gather and write RunInfo file
                path: { meta.lane == "all" ? "${params.outdir}/demultiplex_stats" : "${params.outdir}/${meta.id}/demultiplex_stats" },
                mode: params.publish_dir_mode,
                pattern: "RunInfo.xml",
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                path: { meta.lane == "all" || meta.lane.toInteger() == 0 ? "${params.outdir}/" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "**.fastq.gz",
            ]
        ]
    }

    withName: BASES2FASTQ {
        ext.args = [ "--strict",
                    params.trim_fastq ? "--settings 'R1AdapterTrim,true' --settings 'R2AdapterTrim,true'" : "",
        ].join(" ").trim()
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: "output/*.{json,csv,html,log}",
                saveAs: { filename -> filename.minus("output/") }
            ],
            [
                path: { "${params.outdir}/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: "output/Samples/*/*.{json,fastq.gz}",
                saveAs: { filename -> filename.minus("output/") }
            ],
            [
                path: { "${params.outdir}/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: "output/info/*.{log}",
                saveAs: { filename -> filename.split("/")[-1] }
            ]
        ]
    }

    withName: FASTP {

        publishDir = [
            [
                path: { meta.lane == "all" ? "${params.outdir}/fastp" : "${params.outdir}/${meta.fcid}/fastp" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.{html,json}"
            ],
            [
                path: { meta.lane == "all" ? "${params.outdir}/fastp" : "${params.outdir}/${meta.fcid}/fastp" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> params.trim_fastq ? filename : null },
                pattern: "*.fastq.gz"
            ]
        ]
    }

    withName: FALCO {
        publishDir = [
            path: { meta.lane == "all" ? "${params.outdir}/falco" : "${params.outdir}/${meta.fcid}/falco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: KRAKEN2 {
        publishDir = [
            path: { meta.lane == "all" ? "${params.outdir}/kraken2" : "${params.outdir}/${meta.fcid}/kraken2" },
            mode: params.publish_dir_mode,
            pattern: '*.{html}',
            saveAs: { filename -> filename.equals('versions.yml') ? null: filename }
        ]
    }

    withName: FASTQ_SCREEN {
        publishDir = [
            path: { meta.lane == "all" ? "${params.outdir}/fastq_screen" : "${params.outdir}/${meta.fcid}/fastq_screen" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: INTEROP {
        publishDir = [
            path: { meta.lane == "all" ? "${params.outdir}/InterOp" : "${params.outdir}/${meta.fcid}/InterOp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MD5SUM {
        publishDir = [
            path: { meta.lane == "all" ? "${params.outdir}/md5sum" : "${params.outdir}/${meta.fcid}/md5sum" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: SGDEMUX {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: "output/*.{tsv, fastq.gz}",
                saveAs: { filename -> filename.minus("output/") }
            ],
        ]
    }

    withName: FQTK {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: "output/*.{txt, fq.gz}",
                saveAs: { filename -> filename.minus("output/") }
            ],
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
